/* tslint:disable */
/* eslint-disable */
/**
 * meeting room booking system
 * api document
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface LoginUserDto
 */
export interface LoginUserDto {
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    password: string;
}
/**
 * 
 * @export
 * @interface LoginUserVo
 */
export interface LoginUserVo {
    /**
     * 
     * @type {UserInfo}
     * @memberof LoginUserVo
     */
    userInfo: UserInfo;
    /**
     * 
     * @type {string}
     * @memberof LoginUserVo
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserVo
     */
    refreshToken: string;
}
/**
 * 
 * @export
 * @interface LoginUserVoUnifiedRes
 */
export interface LoginUserVoUnifiedRes {
    /**
     * 
     * @type {LoginUserVo}
     * @memberof LoginUserVoUnifiedRes
     */
    data?: LoginUserVo;
    /**
     * 
     * @type {number}
     * @memberof LoginUserVoUnifiedRes
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginUserVoUnifiedRes
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface NullUnifiedRes
 */
export interface NullUnifiedRes {
    /**
     * 
     * @type {string}
     * @memberof NullUnifiedRes
     */
    data?: string;
    /**
     * 
     * @type {number}
     * @memberof NullUnifiedRes
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof NullUnifiedRes
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface RefreshTokenVo
 */
export interface RefreshTokenVo {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenVo
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenVo
     */
    refreshToken: string;
}
/**
 * 
 * @export
 * @interface RefreshTokenVoUnifiedRes
 */
export interface RefreshTokenVoUnifiedRes {
    /**
     * 
     * @type {RefreshTokenVo}
     * @memberof RefreshTokenVoUnifiedRes
     */
    data?: RefreshTokenVo;
    /**
     * 
     * @type {number}
     * @memberof RefreshTokenVoUnifiedRes
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenVoUnifiedRes
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface RegisterUserDto
 */
export interface RegisterUserDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    captcha: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    nickName: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserDto
     */
    email: string;
}
/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    nickName: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    captcha: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    headPic: string;
}
/**
 * 
 * @export
 * @interface UpdateUserPasswordDto
 */
export interface UpdateUserPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPasswordDto
     */
    captcha: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPasswordDto
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPasswordDto
     */
    nickName: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPasswordDto
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserPasswordDto
     */
    email: string;
}
/**
 * 
 * @export
 * @interface UserDetailVo
 */
export interface UserDetailVo {
    /**
     * 
     * @type {number}
     * @memberof UserDetailVo
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserDetailVo
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailVo
     */
    nickName: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailVo
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailVo
     */
    headPic: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailVo
     */
    phoneNumber: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetailVo
     */
    isFrozen: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserDetailVo
     */
    isAdmin: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDetailVo
     */
    createTime: string;
}
/**
 * 
 * @export
 * @interface UserDetailVoUnifiedRes
 */
export interface UserDetailVoUnifiedRes {
    /**
     * 
     * @type {UserDetailVo}
     * @memberof UserDetailVoUnifiedRes
     */
    data?: UserDetailVo;
    /**
     * 
     * @type {number}
     * @memberof UserDetailVoUnifiedRes
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDetailVoUnifiedRes
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    createTime: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInfo
     */
    roles: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInfo
     */
    permissions: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    nickName: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    headPic: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    phoneNumber: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserInfo
     */
    isFrozen: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserInfo
     */
    isAdmin: boolean;
}
/**
 * 
 * @export
 * @interface UserListVo
 */
export interface UserListVo {
    /**
     * 
     * @type {Array<UserDetailVo>}
     * @memberof UserListVo
     */
    users: Array<UserDetailVo>;
    /**
     * 
     * @type {number}
     * @memberof UserListVo
     */
    totalCount: number;
}
/**
 * 
 * @export
 * @interface UserListVoUnifiedRes
 */
export interface UserListVoUnifiedRes {
    /**
     * 
     * @type {UserListVo}
     * @memberof UserListVoUnifiedRes
     */
    data?: UserListVo;
    /**
     * 
     * @type {number}
     * @memberof UserListVoUnifiedRes
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof UserListVoUnifiedRes
     */
    message?: string;
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerAdminLogin: async (loginUserDto: LoginUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserDto' is not null or undefined
            assertParamExists('userControllerAdminLogin', 'loginUserDto', loginUserDto)
            const localVarPath = `/api/v1/user/admin/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerAdminRefresh: async (refreshToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists('userControllerAdminRefresh', 'refreshToken', refreshToken)
            const localVarPath = `/api/v1/user/admin/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refreshToken !== undefined) {
                localVarQueryParameter['refreshToken'] = refreshToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCaptcha: async (address: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('userControllerCaptcha', 'address', address)
            const localVarPath = `/api/v1/user/register-captcha`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFreeze: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerFreeze', 'id', id)
            const localVarPath = `/api/v1/user/freeze`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerInfo: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerRefresh: async (refreshToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists('userControllerRefresh', 'refreshToken', refreshToken)
            const localVarPath = `/api/v1/user/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refreshToken !== undefined) {
                localVarQueryParameter['refreshToken'] = refreshToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterUserDto} registerUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerRegister: async (registerUserDto: RegisterUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerUserDto' is not null or undefined
            assertParamExists('userControllerRegister', 'registerUserDto', registerUserDto)
            const localVarPath = `/api/v1/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate: async (updateUserDto: UpdateUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('userControllerUpdate', 'updateUserDto', updateUserDto)
            const localVarPath = `/api/v1/user/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateCaptcha: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/update/captcha`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserPasswordDto} updateUserPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdatePassword: async (updateUserPasswordDto: UpdateUserPasswordDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserPasswordDto' is not null or undefined
            assertParamExists('userControllerUpdatePassword', 'updateUserPasswordDto', updateUserPasswordDto)
            const localVarPath = `/api/v1/user/update_password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdatePasswordCaptcha: async (address: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('userControllerUpdatePasswordCaptcha', 'address', address)
            const localVarPath = `/api/v1/user/update_password/captcha`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserPasswordDto} updateUserPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdatePassword_1: async (updateUserPasswordDto: UpdateUserPasswordDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserPasswordDto' is not null or undefined
            assertParamExists('userControllerUpdatePassword_1', 'updateUserPasswordDto', updateUserPasswordDto)
            const localVarPath = `/api/v1/user/admin/update_password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate_2: async (updateUserDto: UpdateUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('userControllerUpdate_2', 'updateUserDto', updateUserDto)
            const localVarPath = `/api/v1/user/admin/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUserLogin: async (loginUserDto: LoginUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserDto' is not null or undefined
            assertParamExists('userControllerUserLogin', 'loginUserDto', loginUserDto)
            const localVarPath = `/api/v1/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerAdminLogin(loginUserDto: LoginUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginUserVoUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerAdminLogin(loginUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerAdminRefresh(refreshToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshTokenVoUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerAdminRefresh(refreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerCaptcha(address: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NullUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerCaptcha(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFreeze(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NullUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFreeze(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerInfo(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailVoUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserListVoUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerRefresh(refreshToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshTokenVoUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerRefresh(refreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterUserDto} registerUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerRegister(registerUserDto: RegisterUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NullUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerRegister(registerUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdate(updateUserDto: UpdateUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NullUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdate(updateUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdateCaptcha(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NullUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdateCaptcha(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateUserPasswordDto} updateUserPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdatePassword(updateUserPasswordDto: UpdateUserPasswordDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NullUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdatePassword(updateUserPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdatePasswordCaptcha(address: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NullUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdatePasswordCaptcha(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateUserPasswordDto} updateUserPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdatePassword_1(updateUserPasswordDto: UpdateUserPasswordDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NullUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdatePassword_1(updateUserPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdate_2(updateUserDto: UpdateUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NullUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdate_2(updateUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUserLogin(loginUserDto: LoginUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginUserVoUnifiedRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUserLogin(loginUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerAdminLogin(loginUserDto: LoginUserDto, options?: any): AxiosPromise<LoginUserVoUnifiedRes> {
            return localVarFp.userControllerAdminLogin(loginUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerAdminRefresh(refreshToken: string, options?: any): AxiosPromise<RefreshTokenVoUnifiedRes> {
            return localVarFp.userControllerAdminRefresh(refreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCaptcha(address: string, options?: any): AxiosPromise<NullUnifiedRes> {
            return localVarFp.userControllerCaptcha(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFreeze(id: number, options?: any): AxiosPromise<NullUnifiedRes> {
            return localVarFp.userControllerFreeze(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerInfo(options?: any): AxiosPromise<UserDetailVoUnifiedRes> {
            return localVarFp.userControllerInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerList(options?: any): AxiosPromise<UserListVoUnifiedRes> {
            return localVarFp.userControllerList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} refreshToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerRefresh(refreshToken: string, options?: any): AxiosPromise<RefreshTokenVoUnifiedRes> {
            return localVarFp.userControllerRefresh(refreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterUserDto} registerUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerRegister(registerUserDto: RegisterUserDto, options?: any): AxiosPromise<NullUnifiedRes> {
            return localVarFp.userControllerRegister(registerUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate(updateUserDto: UpdateUserDto, options?: any): AxiosPromise<NullUnifiedRes> {
            return localVarFp.userControllerUpdate(updateUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateCaptcha(options?: any): AxiosPromise<NullUnifiedRes> {
            return localVarFp.userControllerUpdateCaptcha(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserPasswordDto} updateUserPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdatePassword(updateUserPasswordDto: UpdateUserPasswordDto, options?: any): AxiosPromise<NullUnifiedRes> {
            return localVarFp.userControllerUpdatePassword(updateUserPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdatePasswordCaptcha(address: string, options?: any): AxiosPromise<NullUnifiedRes> {
            return localVarFp.userControllerUpdatePasswordCaptcha(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserPasswordDto} updateUserPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdatePassword_1(updateUserPasswordDto: UpdateUserPasswordDto, options?: any): AxiosPromise<NullUnifiedRes> {
            return localVarFp.userControllerUpdatePassword_1(updateUserPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate_2(updateUserDto: UpdateUserDto, options?: any): AxiosPromise<NullUnifiedRes> {
            return localVarFp.userControllerUpdate_2(updateUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUserLogin(loginUserDto: LoginUserDto, options?: any): AxiosPromise<LoginUserVoUnifiedRes> {
            return localVarFp.userControllerUserLogin(loginUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {LoginUserDto} loginUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerAdminLogin(loginUserDto: LoginUserDto, options?: any) {
        return UserApiFp(this.configuration).userControllerAdminLogin(loginUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} refreshToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerAdminRefresh(refreshToken: string, options?: any) {
        return UserApiFp(this.configuration).userControllerAdminRefresh(refreshToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} address 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerCaptcha(address: string, options?: any) {
        return UserApiFp(this.configuration).userControllerCaptcha(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerFreeze(id: number, options?: any) {
        return UserApiFp(this.configuration).userControllerFreeze(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerInfo(options?: any) {
        return UserApiFp(this.configuration).userControllerInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerList(options?: any) {
        return UserApiFp(this.configuration).userControllerList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} refreshToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerRefresh(refreshToken: string, options?: any) {
        return UserApiFp(this.configuration).userControllerRefresh(refreshToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterUserDto} registerUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerRegister(registerUserDto: RegisterUserDto, options?: any) {
        return UserApiFp(this.configuration).userControllerRegister(registerUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdate(updateUserDto: UpdateUserDto, options?: any) {
        return UserApiFp(this.configuration).userControllerUpdate(updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdateCaptcha(options?: any) {
        return UserApiFp(this.configuration).userControllerUpdateCaptcha(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserPasswordDto} updateUserPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdatePassword(updateUserPasswordDto: UpdateUserPasswordDto, options?: any) {
        return UserApiFp(this.configuration).userControllerUpdatePassword(updateUserPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} address 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdatePasswordCaptcha(address: string, options?: any) {
        return UserApiFp(this.configuration).userControllerUpdatePasswordCaptcha(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserPasswordDto} updateUserPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdatePassword_1(updateUserPasswordDto: UpdateUserPasswordDto, options?: any) {
        return UserApiFp(this.configuration).userControllerUpdatePassword_1(updateUserPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdate_2(updateUserDto: UpdateUserDto, options?: any) {
        return UserApiFp(this.configuration).userControllerUpdate_2(updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginUserDto} loginUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUserLogin(loginUserDto: LoginUserDto, options?: any) {
        return UserApiFp(this.configuration).userControllerUserLogin(loginUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}


